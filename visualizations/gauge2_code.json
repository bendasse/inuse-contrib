{
  "$schema": "https://vega.github.io/schema/vega/v5.json",

  /* To custumize the gauge simply change the value of the desired variable in the signals part of the code. This is the only part in which you need to do modifications. We tried to make the variable names as descriptive as possible.
  For example this line :  {"name": "unit","value":" L"} represents the units. To change the units simply change the value like so : {"name": "unit","value":" mm"}
  */

  "title": {
    "text": "Title",
    "fontSize": {"signal" : "fontFactor*16"},
    "font": {"signal": "font"}
  },
  "signals": [
    // Circular marks
    {"name": "outerRadius","update": "min(width/2, height/(1-cos(boundaries)))"},
    {"name": "innerRadius","update": "outerRadius * 0.75"},
    {"name": "boundaries","update": "3/5*PI"},
    {"name": "fillColor","update": "mainValue<=limit1 ? color1 : (mainValue>limit2 ? color3 : color2)"}, // takes the color indicators by default

    // Ticks
    {"name": "big_ticksNumber","value": 5},
    {"name": "small_ticksNumber","value": 41},
    {"name": "ticksColor","value": "#000000"},
    {"name": "tick_width","update": "PI/130"},
    {"name": "scale_in_gauge","value": false},

    // Data part
    {"name": "usedValue","update": "min(max(minValue, mainValue), maxValue)"},
    {"name": "mainValue","update": "50"}, // add data here
    {"name": "minValue", "value": 0},
    {"name": "maxValue", "value": 100},
    {"name": "backgroundColor","value": "#cbd1d6"},

    // Inidcator boundaries and colours
    {"name": "limit1", "update": 22},
    {"name": "limit2", "update": 30},
    {"name": "color1","value": "#5cb85c"},
    {"name": "color2","value": "#f0ad4e"},
    {"name": "color3","value": "#d95350"},
    
    // Text
    {"name": "fontFactor","update": "(outerRadius/5)/25"},
    {"name": "font","value": "verdana"},
    {"name": "unit","value": " sec/planche"},

    // Needle
    {"name": "needleColor","value": "#555"},
    {"name": "needleSize","update": "innerRadius*0.36"},
    {"name": "alertStatus","update": "mainValue >= limit2 ?  1 : 0 "},
    {"name": "alertColor","value": "#d95350"},

    // do not modify the variables below
    {"name": "centerX","update": "width/2"},
    {"name": "centerY","update": "outerRadius"},
    {"name": "Sboundary","update": "-boundaries - (tick_width/2)/(maxValue - minValue)*PI"},
    {"name": "Eboundary","update": "boundaries + (tick_width/2)/(maxValue - minValue)*PI"},
    {"name": "domain1","update": "limit1/(maxValue-minValue)"},
    {"name": "domain2","update": "limit2/(maxValue-minValue)"}
  ],
  "data": [
    {
      "name": "big_ticks",
      "transform": [
        {
          "type": "sequence",
          "as": "data",
          "start": {
            "signal": "minValue"
          },
          "stop": {
            "signal": "maxValue + 0.01"
          },
          "step": {
            "signal": "(maxValue - minValue)/(big_ticksNumber-1)"
          }
        },
        {
          "type": "formula",
          "as": "radS",
          "expr": "(datum.data/(maxValue - minValue))*2*boundaries -boundaries - tick_width/2"
        },
        {
          "type": "formula",
          "as": "radE",
          "expr": "(datum.data/(maxValue - minValue))*2*boundaries -boundaries  + tick_width/2"
        },
        {
          "type": "formula",
          "as": "radianRef",
          "expr": "((maxValue-datum.data)/(maxValue - minValue)) *2*boundaries - boundaries"
        },
        {
          "type": "formula",
          "as": "x",
          "expr": "centerX - sin(datum.radianRef)*(scale_in_gauge ? outerRadius*0.85 : innerRadius*(datum.data==maxValue ? 0.72 :(datum.data==minValue ? 0.78 : 0.73)))"
        },
        {
          "type": "formula",
          "as": "y",
          "expr": "centerY - cos(datum.radianRef)*(scale_in_gauge ? outerRadius*0.85 : innerRadius*(datum.data==minValue || datum.data==maxValue ? 0.9 : 0.73))"
        }
      ]
    },
    {
      "name": "small_ticks",
      "transform": [
        {
          "type": "sequence",
          "as": "data",
          "start": {
            "signal": "minValue"
          },
          "stop": {
            "signal": "maxValue + 0.01"
          },
          "step": {
            "signal": "(maxValue - minValue)/(small_ticksNumber-1)"
          }
        },
        {
          "type": "formula",
          "as": "radS",
          "expr": "(datum.data/(maxValue - minValue))*2*boundaries -boundaries - tick_width/2"
        },
        {
          "type": "formula",
          "as": "radE",
          "expr": "(datum.data/(maxValue - minValue))*2*boundaries -boundaries  + tick_width/2"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "needleScale",
      "type": "linear",
      "domain": {
        "data": "small_ticks",
        "field": "data"
      },
      "range": [
        {
          "signal": "-boundaries*180/PI"
        },
        {"signal": "boundaries*180/PI"}
      ]
    }
  ],
  "marks": [
    {
      "type": "arc",
      "name": "background",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "startAngle": {
            "signal": "Sboundary"
          },
          "endAngle": {
            "signal": "Eboundary"
          },
          "outerRadius": {
            "signal": "outerRadius"
          },
          "innerRadius": {
            "signal": "innerRadius"
          },
          "fill": {
            "signal": "backgroundColor"
          },
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "name": "Gauge",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "startAngle": {
            "signal": "Sboundary"
          },
          "endAngle": {
            "signal": "Sboundary + 2*Eboundary*(usedValue/(maxValue-minValue))"
          },
          "outerRadius": {
            "signal": "outerRadius"
          },
          "innerRadius": {
            "signal": "innerRadius"
          },
          "fill": {
            "signal": "fillColor"
          },
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "name": "b_ticks",
      "from": {"data": "big_ticks"},
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "outerRadius": {
            "signal": "scale_in_gauge ? outerRadius : innerRadius*0.91"
          },
          "innerRadius": {
            "signal": "scale_in_gauge ? outerRadius*0.94 : innerRadius*0.91*0.94"
          },
          "startAngle": {
            "data": "tick",
            "field": "radS"
          },
          "endAngle": {
            "data": "tick",
            "field": "radE"
          },
          "fill": {
            "signal": "ticksColor"
          },
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "description": "ticks on the arc",
      "name": "s_ticks",
      "from": {"data": "small_ticks"},
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "outerRadius": {
            "signal": "scale_in_gauge ? outerRadius : innerRadius*0.91"
          },
          "innerRadius": {
            "signal": "(scale_in_gauge ? outerRadius : innerRadius*0.91) * 0.965"
          },
          "startAngle": {
            "data": "tick",
            "field": "radS"
          },
          "endAngle": {
            "data": "tick",
            "field": "radE"
          },
          "fill": {
            "signal": "ticksColor"
          },
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "outerRadius": {
            "signal": "innerRadius*0.98"
          },
          "innerRadius": {
            "signal": "innerRadius*0.93"
          },
          "startAngle": {
            "signal": "Sboundary"
          },
          "endAngle": {
            "signal": "2*Eboundary*domain1 + Sboundary - 0.003*PI"
          },
          "fill": {"signal": "color1"},
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "outerRadius": {
            "signal": "innerRadius*0.98"
          },
          "innerRadius": {
            "signal": "innerRadius*0.93"
          },
          "startAngle": {
            "signal": "2*Eboundary*domain1 + Sboundary + 0.003*PI"
          },
          "endAngle": {
            "signal": "2*Eboundary*domain2 + Sboundary - 0.003*PI"
          },
          "fill": {"signal": "color2"},
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "arc",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"},
          "outerRadius": {
            "signal": "innerRadius*0.98"
          },
          "innerRadius": {
            "signal": "innerRadius*0.93"
          },
          "startAngle": {
            "signal": "2*Eboundary*domain2 + Sboundary + 0.003*PI"
          },
          "endAngle": {
            "signal": "Eboundary"
          },
          "fill": {"signal": "color3"},
          "cornerRadius": {
            "signal": "2"
          }
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "big_ticks"},
      "encode": {
        "enter": {
          "align": {"value": "center"},
          "baseline": {
            "value": "alphabetic"
          }
        },
        "update": {
          "text": {
            "signal": "format(datum.data, '.0f')"
          },
          "x": {"field": "x"},
          "y": {"field": "y"},
          "fontSize": {
            "signal": "fontFactor * 9"
          },
          "fill": {
            "signal": "ticksColor"
          },
          "font": {"signal": "font"}
        }
      }
    },
    {
      "type": "text",
      "description": "displayed main value at the bottom center of the gauge ",
      "name": "gaugeValue",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {
            "signal": "outerRadius - cos(boundaries)*outerRadius*1.2"
          },
          "align": {"value": "center"},
          "text": {
            "signal": "format(mainValue, '.2f') + unit "
          },
          "fontSize": {"signal": "15*fontFactor"},
          "font": {"signal": "font"}
        }
      }
    },
    {
      "type": "symbol",
      "name": "needle",
      "encode": {
        "enter": {
          "x": {"signal": "centerX"},
          "y": {"signal": "centerY"}
        },
        "update": {
          "shape": {
            "signal": "'M-2.5 -2.5 Q 0 0 2.5 -2.5 L 0 -' + toString(needleSize) + ' Z '"
          },
          "angle": {
            "signal": "usedValue",
            "scale": "needleScale"
          },
          "size": {"signal": "10"},
          "stroke": {
            "signal": "alertStatus ? alertColor : needleColor"
          },
          "fill": {
            "signal": "alertStatus ? alertColor : needleColor"
          }
        }
      }
    }
  ]
}
